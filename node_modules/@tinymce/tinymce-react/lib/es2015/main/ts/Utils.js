/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { eventPropTypes } from './components/EditorPropTypes';
export var isFunction = function (x) { return typeof x === 'function'; };
var isEventProp = function (name) {
    return name in eventPropTypes;
};
var eventAttrToEventName = function (attrName) {
    return attrName.substr(2);
};
export var bindHandlers = function (editor, prevProps, props, boundHandlers) {
    return bindHandlers2(editor.on.bind(editor), editor.off.bind(editor), function (handler) { return function (e) { return handler(e, editor); }; }, prevProps, props, boundHandlers);
};
export var bindHandlers2 = function (on, off, adapter, prevProps, props, boundHandlers) {
    var prevEventKeys = Object.keys(prevProps).filter(isEventProp);
    var currEventKeys = Object.keys(props).filter(isEventProp);
    var removedKeys = prevEventKeys.filter(function (key) { return props[key] === undefined; });
    var changedKeys = currEventKeys.filter(function (key) { return prevProps[key] !== undefined && prevProps[key] != props[key]; });
    var addedKeys = currEventKeys.filter(function (key) { return prevProps[key] === undefined; });
    __spreadArrays(removedKeys, changedKeys).forEach(function (key) {
        // remove event handler
        var eventName = eventAttrToEventName(key);
        var wrappedHandler = boundHandlers[eventName];
        off(eventName, wrappedHandler);
        delete boundHandlers[eventName];
    });
    __spreadArrays(changedKeys, addedKeys).forEach(function (key) {
        // add event handler
        var handler = props[key];
        if (handler !== undefined) {
            var eventName = eventAttrToEventName(key);
            var wrappedHandler = adapter(handler);
            boundHandlers[eventName] = wrappedHandler;
            on(eventName, wrappedHandler);
        }
    });
};
var unique = 0;
export var uuid = function (prefix) {
    var time = Date.now();
    var random = Math.floor(Math.random() * 1000000000);
    unique++;
    return prefix + '_' + random + unique + String(time);
};
export var isTextarea = function (element) {
    return element !== null && element.tagName.toLowerCase() === 'textarea';
};
var normalizePluginArray = function (plugins) {
    if (typeof plugins === 'undefined' || plugins === '') {
        return [];
    }
    return Array.isArray(plugins) ? plugins : plugins.split(' ');
};
export var mergePlugins = function (initPlugins, inputPlugins) {
    return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));
};
