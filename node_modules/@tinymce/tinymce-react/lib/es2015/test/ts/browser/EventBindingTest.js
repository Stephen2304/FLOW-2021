import { Assert, UnitTest } from '@ephox/bedrock-client';
import { bindHandlers2 } from '../../../main/ts/Utils';
UnitTest.test('Event binding test', function () {
    var calls;
    var boundHandlers;
    var check = function (offHandlers, onHandlers, activeHandlers) {
        var offCount = Object.keys(offHandlers).length;
        var onCount = Object.keys(onHandlers).length;
        Assert.eq('Expected number of calls to be sum of handlers removed and handlers added', offCount + onCount, calls.length);
        var i;
        for (i = 0; i < offCount; i++) {
            var value = calls[i];
            Assert.eq('Call type did not match expected', 'off', value.type);
            Assert.eq('Handler did not match expected', offHandlers[value.name], value.handler.wrapped);
        }
        for (; i < calls.length; i++) {
            var value = calls[i];
            Assert.eq('Call type did not match expected', 'on', value.type);
            Assert.eq('Handler did not match expected', onHandlers[value.name], value.handler.wrapped);
        }
        Assert.eq('Bound handlers did not match expected', Object.keys(activeHandlers).length, Object.keys(boundHandlers).length);
    };
    var on = function (name, handler, prepend) { return calls.push({ type: 'on', name: name, handler: handler }); };
    var off = function (name, handler) { return calls.push({ type: 'off', name: name, handler: handler }); };
    var adapter = function (wrapped) { return ({ wrapped: wrapped }); };
    // dummy functions for handlers
    var focusHandler = function () { };
    var blurHandler = function () { };
    // check no handlers
    calls = [];
    boundHandlers = {};
    bindHandlers2(on, off, adapter, {}, {}, boundHandlers);
    check({}, {}, {});
    // check adding handlers
    // nothing should be removed and the focus and blur handler should be added
    calls = [];
    boundHandlers = {};
    bindHandlers2(on, off, adapter, {}, { onFocus: focusHandler, onBlur: blurHandler }, boundHandlers);
    check({}, { 'Focus': focusHandler, 'Blur': blurHandler }, { 'Focus': focusHandler, 'Blur': blurHandler });
    // check changing an unrelated property while keeping handlers the same
    // nothing should be added or removed and the bound handlers should stay the same
    calls = [];
    boundHandlers = { 'Focus': adapter(focusHandler), 'Blur': adapter(blurHandler) };
    bindHandlers2(on, off, adapter, { onFocus: focusHandler, onBlur: blurHandler, disabled: true }, { onFocus: focusHandler, onBlur: blurHandler, disabled: false }, boundHandlers);
    check({}, {}, { 'Focus': focusHandler, 'Blur': blurHandler });
    // check removing a handler for Blur while keeping the Focus handler
    // the blur handler should be removed and the focus handler should remain afterwards
    calls = [];
    boundHandlers = { 'Focus': adapter(focusHandler), 'Blur': adapter(blurHandler) };
    bindHandlers2(on, off, adapter, { onFocus: focusHandler, onBlur: blurHandler }, { onFocus: focusHandler }, boundHandlers);
    check({ 'Blur': blurHandler }, {}, { 'Focus': focusHandler });
});
