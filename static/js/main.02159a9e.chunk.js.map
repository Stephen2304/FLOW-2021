{"version":3,"sources":["TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["require","firebase","initializeApp","apiKey","authDomain","databaseUrl","projectId","storageBucket","messagingSenderId","appId","measurementId","TaskList","props","state","loading","database","ref","orderByKey","on","snapshot","setState","Taches","val","this","map","elt","i","className","description","projet","datebegin","dateend","prioritÃ©","Component","Modal","setAppElement","App","useState","modalIsOpen","setmodalIsOpen","href","id","onClick","isOpen","shouldCloseOnOverlayClick","onRequestClose","style","overlay","background","content","color","width","height","right","left","top","position","type","disabled","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAGAA,EAAQ,IACRA,EAAQ,IAIRA,EAAQ,IACRA,EAAQ,IAcNC,IAASC,cAXU,CACjBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,sDACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAKZ,IAAMC,EAAb,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAS,GAHE,EAFvB,gEASwB,IAAD,OACNb,IAASc,WAAWC,IAAI,UAAUC,aAE5CC,GAAG,SAAS,SAAAC,GACX,EAAKC,SAAS,CACVC,OAAQF,EAASG,MACjBR,SAAS,SAfrB,+BAqBI,OAAGS,KAAKV,MAAMC,QACH,+CAIP,8BAAIS,KAAKV,MAAMQ,OAAOG,KAAI,SAACC,EAAKC,GAAN,OAAY,sBAAKC,UAAU,SAAf,eAAoC,sBAAKA,UAAU,QAAf,UAAwBF,EAAIG,YAA5B,IAA0CH,EAAII,OAA9C,IAAuDJ,EAAIK,UAA3D,IAAuEL,EAAIM,QAA3E,IAAqFN,EAAIO,cAAW,iBAAS,qBAAnHN,MAApE,WA1BR,GAA8BO,a,uBCf9BC,IAAMC,cAAc,SAyELC,MArEf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,sBAAKZ,UAAU,QAAf,UACA,qBAAKA,UAAU,MAAf,SACI,+BACA,oBAAIA,UAAU,eAAd,SAA6B,mBAAGa,KAAK,GAAR,oBAC7B,6BAAI,mBAAGA,KAAK,GAAR,qBACJ,6BAAI,mBAAGA,KAAK,GAAR,wBACJ,6BAAI,mBAAGA,KAAK,GAAR,8BAKR,sBAAKb,UAAU,OAAf,UACA,wBAGI,+BACA,oBAAIA,UAAU,WAAd,SAAyB,mBAAGa,KAAK,GAAR,wBACzB,6BAAI,mBAAGA,KAAK,GAAR,4BAEJ,6BAAI,mBAAGA,KAAK,GAAR,0BAGR,sBAAKb,UAAU,SAAf,UACI,0CACE,wBAAQA,UAAU,kBAAkBc,GAAG,YAAYC,QAAS,kBAAMH,GAAe,IAAjF,uBACE,eAAC,IAAD,CAAOI,OAAQL,EAAaM,2BAA2B,EAAOC,eAAgB,kBAAMN,GAAe,IACnGO,MACE,CACEC,QAAU,CACRC,WAAY,sBAEdC,QAAS,CACPC,MAAO,OACPC,MAAO,QACPC,OAAO,QACPC,MAAM,QACNC,KAAK,QACLC,IAAI,UAZV,UAiBE,wBAAQ5B,UAAU,gBAAgBe,QAAS,kBAAMH,GAAe,IAEhEO,MACG,CACEU,SAAU,WACVH,MAAO,QALZ,eAWA,uBAAOI,KAAK,WAAWC,UAAQ,IA5BjC,IA4BoC,uBAAOD,KAAK,OAAOE,YAAY,cACjE,uBACA,uBAAOF,KAAK,OAAOE,YAAY,cAAa,6BAIlD,qBAAKhC,UAAU,QAAf,SACE,cAAC,EAAD,UCjEKiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02159a9e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport firebase from 'firebase';\r\n\r\nrequire('firebase/auth');\r\nrequire('firebase/database');\r\n\r\n\r\n// Add the Firebase products that you want to use\r\nrequire(\"firebase/auth\");\r\nrequire(\"firebase/firestore\");\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDZblqJDN1qDnfuodE3ttUlzx9tpLnRahM\",\r\n    authDomain: \"flow2021-899f1.firebaseapp.com\",\r\n    databaseUrl: \"https://flow2021-899f1-default-rtdb.firebaseio.com/\",\r\n    projectId: \"flow2021-899f1\",\r\n    storageBucket: \"flow2021-899f1.appspot.com\",\r\n    messagingSenderId: \"1007288699495\",\r\n    appId: \"1:1007288699495:web:9d6d2228e4662fb7fce2c2\",\r\n    measurementId: \"G-2CM6L6FXH8\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  \r\nexport class TaskList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        var db = firebase.database().ref('Taches').orderByKey(); \r\n    \r\n    db.on('value', snapshot  => {\r\n        this.setState({\r\n            Taches: snapshot.val(),\r\n            loading: false\r\n        })\r\n    })\r\n}\r\n\r\nrender() {\r\n    if(this.state.loading){\r\n        return <h1>Chargement...</h1>\r\n    }\r\n\r\n    return (\r\n        <p>{this.state.Taches.map((elt, i) => <div className='taches' key= {i} >  <div className=\"elt-1\">{elt.description} {elt.projet} {elt.datebegin} {elt.dateend} {elt.prioritÃ© ? ' ðŸ”µ ' : ' ðŸ”´'}</div></div>)} </p>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport {TaskList} from './TaskList';\nimport Modal from 'react-modal';\nimport { useState } from 'react';\nimport { Editor } from \"@tinymce/tinymce-react\";\n\n\n\n\n\nModal.setAppElement('#root');\n\n\n\nfunction App() {\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\n  return (\n    <div className=\"Aside\">\n    <div className=\"Nav\">\n        <ul>\n        <li className=\"Nav-selected\"><a href=\"\">Home</a></li>\n        <li><a href=\"\">Tasks</a></li>\n        <li><a href=\"\">Projects</a></li>\n        <li><a href=\"\">Calendars</a></li>\n        </ul>\n\n    </div>\n\n    <div className=\"Menu\">\n    <div>\n        \n    </div>\n        <ul>\n        <li className=\"selected\"><a href=\"\">My tasks</a></li>\n        <li><a href=\"\">My Bookmarks</a></li>\n\n        <li><a href=\"\">Team</a></li>\n        </ul>\n    </div>\n    <div className=\"header\">\n        <h1>My tasks</h1>\n          <button className=\"btn btn-primary\" id=\"btn-tasks\" onClick={() => setmodalIsOpen(true)}>Add Tasks</button>\n            <Modal isOpen={modalIsOpen} shouldCloseOnOverlayClick={false} onRequestClose={() => setmodalIsOpen(false)}\n            style={\n              {\n                overlay:  {\n                  background: 'rgba(0, 0, 0, 0.44'\n                },\n                content: {\n                  color: 'grey',\n                  width: '450px',\n                  height:'450px',\n                  right:'200px',\n                  left:'500px',\n                  top:'100px'\n                }\n              }\n            }\n            >\n              <button className=\"btn btn-light\" onClick={() => setmodalIsOpen(false)}\n              \n              style={\n                 {\n                   position: 'absolute',\n                   right: '10px'\n                 }\n              }\n\n\n              >X</button>\n              <input type=\"checkbox\" disabled/> <input type=\"text\" placeholder=\"Add title\"/>\n              <hr/>\n              <input type=\"text\" placeholder=\"Add notes\"/><hr/>\n              \n            </Modal> \n    </div>\n        <div className=\"cells\">\n          <TaskList/>\n        </div>\n</div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}